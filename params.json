{"name":"Writethedocs-2014-notes","tagline":"My notes for the 2014 writethedocs conference","body":"#Write the Docs\r\nA conference on writing documentation.\r\nThese notes are notes, not a stenographic record. They're also not spell checked.\r\n\r\n##Monday\r\n\r\n###Flow: A Permaculture Approach to Documentation [Homer Christensen](http://homerchristensen.com)\r\n\r\n* Applying Permaculture idea(l) to docs:\r\n    * Observe, Design, Evolve\r\n* Project Planning: Patterns\r\n      * When planning projects, you’re using what you’ve got to reach your goals.\r\n      * If living systems have natural proclivities, what are the proclivities of your group?\r\n           * This is a restatement of a basic leadership idea: know your people, know your strengths and weaknesses\r\n* Design\r\n     * Zones are ‘areas of access’ in permaculture.\r\n\r\n###Communities are Awesome - Ali Spivak\r\n\r\n* [MDN](https://developer.mozilla.org/en-US/), the mozilla developer network, is an OS wiki; relies upon the community\r\n* MDN is trying to doc everything that matters to developers. This is difficult since the web is big. (This means that MDN is big, too.)\r\n* Leveraging the power of the community lets MDN document as much as it does. There's paid staff and there's community.\r\n* Benefit of community is that it gives you a wide range of experience, opinions, backgrounds. This lets you know what matters to users (and users in different contexts).\r\n* Important to see users as _peers_; they're not your minions. (Great word, Ali.)\r\n    * Users are 'partners on a journey'.\r\n    * You don't offload crappy work on them, you don't _tell_ them what to do.\r\n* Provide opportunity.\r\n    * If you say 'Hey, X needs some documentation', people are likely to take you up on it.\r\n* Intrinsic (internal) motivation is important\r\n    * Users will help because they want to, because they feel pleasure from doing so.\r\n    * People like contributing their expertise to a large audience of peers.\r\n        * e.g. Burning Man\r\n* Three Elements of Motivation:\r\n    1. Autonomy\r\n    2. Mastery\r\n    3. Purpose\r\n    * Check out the book _Drive_ for more about motivation.\r\n* The importance of values\r\n    * Values (clearly stated) give communities something around which to coalesce.\r\n    * Clearly these need to be organically developed.\r\n    * If your company adheres to and exemplifies these values, this makes it part of the community, not some asshole in a suit treating the community members like unpaid idiot minions.\r\n* Collaboration helps you to avoid making wrong decisions.\r\n    * If users don't want to do it, maybe it isn't the right thing to do.\r\n* There isn't necessarily one best way to build a community.\r\n    * What are you passionate about? How can you share that passion with others?\r\n    * What opportunities can you provide to the community?\r\n    * How can you create community?\r\n    * How can you bring more people in?\r\n    * What opportunities can the community bring to you?\r\n\r\n###The New Sheriff in Town: Bringing Documentation Out of Chaos - [Heidi Waterhouse](http://twitter.com/wiredferret)\r\n\r\n* Believe in your own expertise and authority. Then, get to writing.\r\n* Set Up Shop:\r\n    1. **Make a seating chart** Make a seating chart of who is who in the office.\r\n        * Names, specialties\r\n    2. **Map existing documentation** e.g. marketing whitepapers, wikis, etc.\r\n        * Make sure you have access\r\n        * Be willing to dig.\r\n        * You need to see everything in the compay except salaries.\r\n    3. **Get to know the neighborhood** (competitors and users)\r\n        * Read competitiors' docs.\r\n        * (users?)\r\n* Draw Fast\r\n    * **No time for frills**\r\n        * just start writing\r\n    * **Deliver fast and often**\r\n    * **Emergencies first, precisions second**\r\n        * formatting, readability, localization comes second to putting out fires.\r\n* Save the townspeople\r\n    * **Address biggest pain point**\r\n    * **Provide structure to ask q and get feedback**\r\n        * Bugtrackers\r\n        * Declare docs equivalent to code. Needs to be pushed with code.\r\n        * Track doc bugs with code bugs.\r\n            * Provides accountability.\r\n* **Check for scorpions** (these are situations, not people)\r\n    * **Hoarded documentation** Is there a bunch of unreadable docs out there?\r\n        * DO people feel some sort of propriatary interest that is keeping them from sharing their docss?\r\n    * **Stuff from the last sherrif**\r\n        * Did previous writers leave behind a bunch of junk that needs to be taken care of?\r\n    * **Bring in the vigilantes**\r\n        * Are people writing docs and not thinking of themselves are part of the doc team?\r\n* **Build infrastructure**\r\n    * After you put out the fires, make sure you've got structure to keep things going.\r\n    * Go to meetings. Make sure that docs are part of the agenda.\r\n    * **Plat your documents** - Plating is designating spaces for certain use.\r\n        * Can customers **use** the product?\r\n        * Can installers **configure** it?\r\n        * Can advanced users **customize** it? (e.g. apis)\r\n        * Can users **fix** things when they go wrong?\r\n        * You'll need a **reference** guide for when things get too big to remember off the top of your head.\r\n            * Or for when you get bitten by a rattlesnake/go on vacation and aren't around to give all the answers.\r\n* **Sheriff or Texas Ranger**?\r\n    * Do you want to shoot the bandits and leave? Then you're a Texas Ranger\r\n    * Do you want to live in the town and be part of the community? Then you're a sherriff.\r\n\r\n###Ignorance Is Strength: Writing Documentation By Learning As You Go - [Amalia Hawkins](https://twitter.com/starsseldomseen)\r\n\r\n* People who are have innate understanding of materials often aren't the ones who are the best at explaining it.\r\n* How do you learn an existing codebase? Read the code, look @ user-facing documentation, ask sr engineers questions.\r\n    * Reading code is good (tells you how & what), but not _why_? (e.g. What was the developer's intention in writing the code the way it is written?)\r\n* Internal documentation helps a company to avoid growing pain, scaling both horizontally and vertically.\r\n    * If you've got (good) technical docs, it's easier for new engineers to hit the ground running.\r\n* Lessons:\r\n    * **Write Anything**\r\n        * Once something exists, it can be massaged into something good.\r\n        * That cliche about not letting _perfection_ being the enemy of _existing_.\r\n    * **Find your allies**\r\n        * Don't believe that you're confused because you're stupid/a n00b/whatever else that's negative.\r\n        * If you're confused, others probably are, too.\r\n    * **Spread out the work** content, format, critique\r\n        * When you teach, you learn.\r\n\r\n###Did It In Minutes: The Art of Documenting Meeting Notes [Mo Nishiyama](http://twitter.com/synthcat)\r\n\r\n* Hey, meeting minutes are important. Someone should be keeping them.\r\n* During meetings, [sketchnotes](http://rohdesign.com/book/) are fun but not always productive.\r\n* Meeting notes shouldn't just barf back what was said. (regurgitation -> curation)\r\n* So how should you keep meeting notes?\r\n    * **Understand your audience** Who isn't there?\r\n        * Who will need to read these notes?\r\n        * Why will they read them?\r\n    * **Shared Need**\r\n        * What will people get the most from?\r\n            * eg Avoid chronology. Frontload the important stuff.\r\n    * **Write the Facts**\r\n        * Meeting minutes should include what's important. You're not a courtroom stenographer; you can summarize.\r\n    * **Engage your subject matter experts**\r\n        * Before publication, ask experts questions about your minutes. That'll help you to clarify, qualify, classify.\r\n    * **Make your action items clear**\r\n    * **Use collaborative tools**\r\n        * Makes it easy to fix mistakes, typos, &c\r\n    * **Use templates to save time**\r\n    * **Always tell: Who, Where, What**\r\n    * **Easter Eggs**\r\n        * Adding in fun stuff will make people read your notes.\r\n* Exceptions:\r\n    * If your organization loves chronology, keep it.\r\n    * If you _are_ a courtroom stenographer, record everything.\r\n    * If your org has a style guide, stick to it (until you can change it).\r\n\r\n###Hacking the English Language - [Nina Vyedin]()\r\n\r\n_Or, what we can steal from programmers_\r\n\r\n* Documentation can be helped by giving writers a default framework in which to write/work.\r\n* Have templates for oft-written stuff: blog posts, references\r\n* Make sure you know what question a doc is trying to answer.\r\n* **make a spec** for your doc and make sure everyone involved knows the specs.\r\n    * what are the questions you're answering?\r\n    * who is the audience?\r\n    * what is the current state of documentation?\r\n        * new content, existing content (including 3rd party docs)\r\n    * what's the work plan?\r\n        * who owns it, who revises it?\r\n* adapting the idea of _design patterns_ to writing; start a doc with an architecture. examples:\r\n    * **tell a story** linear timeline (walkthrough)\r\n    * **paint a picture** spapshot (introduce feature/tool)\r\n    * **reference** introduce one at a time and describe\r\n    * **theme + situation** idea and use cases (intro to concept)\r\n    * **drill down** general -> specific\r\n    * **level up** simple to complex (getting started.doc)\r\n* Errors/name your variables\r\n    * Undefined 'it'\r\n    * No ownership (avoid magic. [that doesn't mean no django])\r\n    * Vague terms (don't use generic tech terms)\r\n    * Unnamed ideas\r\n* Idea of _refactoring_ vs _editing_\r\n\r\n###Open Source Docs the Hard Way - [Anne Gentle](http://justwriteclick.com/)\r\n\r\n* Seems like the 80/20 'principle' (editorial scarequotes there); a small segment of contributers put in the bulk of the work.\r\n* Book sprints!\r\n    * [OpenStack](http://openstack.org) flew in a whole bunch of writing volunteers and wrote the _OpenStack Operations Guide_, which wound up being published by O'Reilly.\r\n* OSS works; open source docs can work, too.\r\n\r\n###Documenting Domain Specific Knowledge - [Alex Gaynor](https://speakerdeck.com/alex)\r\n\r\n* Think about who the documentation is for.\r\n* Audience – set of knowledge people will come with.\r\n* Document according to audiences; e.g. new users and experts\r\n* Thinks that _straight line docs_ are best; optional stuff can be linked. Trim the fat, it distracts.\r\n* No assumptions: e.g. no jargon.\r\n* It's fine to be prescriptive. You're an expert; share that expertise by informing the reader as to best practices. (Drowning readers in options is often, IMHO, a form of showbloating.)\r\n* Addressing _use cases_ is great. Finding out what use cases the community wants/needs is probably difficult if you don't have a strong community. Good argument for not treating your community like minions/rubes, btw.\r\n* If users have to go to Stack Overflow to figure out your docs, your docs fail.\r\n* Learners often don't know what they don't know. The docs need to inform users of everything they ought to know.\r\n* Users asking 'How do I X?' is feedback on docs.\r\n\r\n###Graphical Explanations - [Geoffrey Grosenbach](http://twitter.com/topfunky)\r\n\r\n* Using graphics in your documentation helps docs to be consumed in different ways (e.g. flip/skim/read).\r\n* _Envisioning Information_ Edward Tufte - check out his ideas about graphics.\r\n* _Information Dashboard Design_ Stephen Few\r\n* Type/typography\r\n    * Pull quotes\r\n    * Title & subtitle\r\n    * Icon fonts (like http://weloveiconfonts.com/ or [font awesome](http://fortawesome.github.io/Font-Awesome/))\r\n* Color\r\n    * Look at all the color schemes for Sublime, for example.\r\n    * [pygments](http://pygments.org/), [SublimeHighlight](https://github.com/n1k0/SublimeHighlight)\r\n* Explanatory tools - making a list of ways of explaining things\r\n    * side-by-side\r\n    * good/better/best\r\n    * timeline\r\n\r\n###TechDocs at Twitter: Creating the Culture of Documentation - [Simeon Franklin](http://twitter.com/markog) & [Marko Gargenta](http://twitter.com/simeonfranklin)\r\n\r\n* What does it mean to do technical documentation (engineer to engineer)?\r\n* Treat docs like code; written by engineers\r\n* Wikis are messy. Not the best solution\r\n* If developers are writing code, _use the existing code workflow_.\r\n    * Check in! Version, check, merge!\r\n    * Harder for the writers, but much easier for the developers.\r\n* [ReStructuredText](http://docutils.sourceforge.net/rst.html)\r\n* Made a plan. e.g. DocDay -> Templates -> DocBird (platform)\r\n* Thinking of documentation as a platform opens up all sort of cool possibilities.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}